/*	general
---------------------------------------------------------------------------------- */



//	logging in
ssh root@[ your.ip.address.here ]



//	add ssh keys to existing droplet
cat ~/.ssh/id_rsa.pub | ssh root@[your.ip.address.here] "cat >> ~/.ssh/authorized_keys"



//	base controls uses control + [ something ]







/*	creation
---------------------------------------------------------------------------------- */



/*	Ubuntu 16.04
------------------- */

//	add new user
adduser [ name ]
//	add secure password
//	other info optional

//	grant sudo
usermod -aG sudo [ name ]

//	switch to user temporarily
su - [ name ]

//	create directory
mkdir ~/.ssh
chmod 700 ~/.ssh
nano ~/.ssh/authorized_keys

//	paste ssh in
//	then
chmod 600 ~/.ssh/authorized_keys
exit

//	as root user now after exit
//	disable password auth
sudo nano /etc/ssh/sshd_config

//	find lines & change
//	unless already correct
PasswordAuthentication no
PubkeyAuthentication yes
ChallengeResponseAuthentication no

//	reload
sudo systemctl reload sshd



/*	basic firewall
------------------- */

sudo ufw app list
sudo ufw allow OpenSSH
sudo ufw enable
sudo ufw status



/*	updating
------------------- */

sudo apt-get update			//	Fetches the list of available updates
sudo apt-get upgrade		//	Strictly upgrades the current packages
sudo apt-get dist-upgrade	//	Installs updates (new ones)
sudo reboot
//	after reboot usually takes a few mins before server back up







/*	nginx
---------------------------------------------------------------------------------- */



sudo apt-get update
sudo apt-get install nginx
sudo ufw app list
sudo ufw allow 'Nginx HTTP'
sudo ufw status
systemctl status nginx
//	should see it saying active (running)
//	test by checking http://[ your ip ]



/*	basic commands
------------------- */

//	stop server
sudo systemctl stop nginx

//	start server
sudo systemctl start nginx

//	stop & start
sudo systemctl restart nginx

//	reload without restart
sudo systemctl reload nginx



/*	directories
------------------- */

//	default web content
/var/www/html

//	config directory & file
/etc/nginx
/etc/nginx/nginx.conf

//	server blocks
/etc/nginx/sites-available/
/etc/nginx/sites-enabled/

//	every request recorded here
/var/log/nginx/access.log

//	any error recorded here
/var/log/nginx/error.log



/*	server blocks
------------------- */

//	make directory & give permissions
sudo mkdir -p /var/www/[ mysite.com ]/html
sudo chown -R $USER:$USER /var/www/[ mysite.com ]/html
sudo chmod -R 755 /var/www

//	temp html
nano /var/www/[ mysite.com ]/html/index.html

<html>
    <head>
        <title>[ mysite.com ]</title>
    </head>
    <body>
        <h1>Upgrading in progress...</h1>
    </body>
</html>

//	server block file
sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/[ mysite.com ]
sudo nano /etc/nginx/sites-available/[ mysite.com ]

//	change the following
//	remove default_server
//	default server remains pointing to www/html
//	for direct ip connection without domains
listen 80;
listen [::]:80;

//	add root directory
root /var/www/[ mysite.com ]/html;

//	add server name
server_name [ mysite.com ] www.[ mysite.com ];

//	redirect all to index.html
location / {
  try_files $uri $uri/ /index.html;
}

//	remove trailing slash
rewrite ^/(.*)/$ /$1 permanent;

//	save & exit
//	enable
sudo ln -s /etc/nginx/sites-available/[ mysite.com ] /etc/nginx/sites-enabled/

//	config
sudo nano /etc/nginx/nginx.conf
//	uncomment ( remove # ) from
server_names_hash_bucket_size 64;
//	save & exit

sudo nginx -t
//	see that there's no errors
sudo systemctl restart nginx
//	test yoursite.com



/*	optimise
------------------- */

//	check number of cores e.g. 1
grep processor /proc/cpuinfo | wc -l
//	check core limit e.g. 1024
ulimit -n

//	edit config
sudo nano /etc/nginx/nginx.conf

//	change default config
//	according to previous results
worker_processes 1;
worker_connections 1024;

//	gzip settings
gzip on;
gzip_comp_level 2;
gzip_min_length 1024;
gzip_vary on;
gzip_proxied any;
gzip_buffers 4 32k;
gzip_http_version 1.1;
gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

//	buffer
//	ignore for now - seem to have error
client_body_buffer_size 10K;
client_header_buffer_size 1k;
client_max_body_size 8m;
large_client_header_buffers 2 1k;

//	timeout
//	ignore for now - seem to have error
client_body_timeout 12;
client_header_timeout 12;
keepalive_timeout 15;
send_timeout 10;

//	turn off logging every request
access_log off;

//	inside server block file
location ~* .(jpg|jpeg|png|gif|ico|css|js)$ {
expires 365d;
}

//	check if everything is okay
sudo nginx -t

//	restart
sudo service nginx restart



/*	secure
------------------- */

//	fail2ban
sudo apt-get update
sudo apt-get install fail2ban

//	copy jail.local
awk '{ printf "# "; print; }' /etc/fail2ban/jail.conf | sudo tee /etc/fail2ban/jail.local

//	install misc
sudo apt-get install sendmail iptables-persistent
sudo service fail2ban stop

//	firewall config
sudo iptables -A INPUT -i lo -j ACCEPT
sudo iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT
sudo iptables -A INPUT -p tcp -m multiport --dports 80,443 -j ACCEPT
sudo iptables -A INPUT -j DROP

//	view
sudo iptables -S

//	save
sudo dpkg-reconfigure iptables-persistent
sudo service fail2ban start

//	change fail2ban settings
sudo nano /etc/fail2ban/jail.local

[DEFAULT]
bantime = 1800

destemail = [ your email ]
sendername = [ your preferred name ]
action = %(action_mwl)s

[nginx-http-auth]
enabled = true

//	restart
sudo service fail2ban stop
sudo service fail2ban start







/*	ssl
---------------------------------------------------------------------------------- */

//	install certbot
sudo add-apt-repository ppa:certbot/certbot
sudo apt-get update
sudo apt-get install python-certbot-nginx

//	adjust firewall
sudo ufw status
sudo ufw allow 'Nginx Full'
sudo ufw delete allow 'Nginx HTTP'
sudo ufw status

//	getting ssl cert
sudo certbot --nginx -d [ mysite.com ] -d www.[ mysite.com ]

//	upsize security
sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048

sudo nano /etc/nginx/sites-available/[ mysite.com ]

//	add this anywhere in server {}
ssl_dhparam /etc/ssl/certs/dhparam.pem;

sudo systemctl reload nginx

//	auto-renewal
sudo crontab -e

//	add at bottom for 2:22 am renewal when possible
22 2 * * * /usr/bin/certbot renew --quiet







/*	using cdns
---------------------------------------------------------------------------------- */



//	free one at cloudflare
sign up, etc etc
changed DNS records from
ns1.digitalocean.com
ns2.digitalocean.com
ns3.digitalocean.com
to their given DNS






