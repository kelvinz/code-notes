/*	general
---------------------------------------------------------------------------------- */



//	prevent double config error
if ( !firebase.apps.length ) {
	firebase.initializeApp( config )
}



//	check if connected
firebase.database().ref().child( '.info/connected' )
.on( 'value', snapshot => {
	if ( snapshot.val() === true ) {
		//	you're connected
	}
})



//	to create an empty node for placeholder
//	add a 0: 0 as a child node
//	it has to have 'content' to exist







/*  authentication
---------------------------------------------------------------------------------- */



//	auto sign in user anonymously
firebase.auth().signInAnonymously()
.catch( error => {
	console.log( error.message )
})

//	when auth changes
firebase.auth().onAuthStateChanged( user => {
	if ( user ) { }
}







/*  database
---------------------------------------------------------------------------------- */



//	indexing your database for faster query
//	so scores value is going to be sorted by value
//	scores: { someone: 2, other: 3 }
{
	"rules": {
		"scores": {
			".indexOn": ".value"
		}
	}
}
//	or if people is sorted by scores
{
	"rules": {
		"people": {
			".indexOn": "scores"
		}
	}
}



/*	realtime
------------------- */







/*	firestore
------------------- */







/*  storage
---------------------------------------------------------------------------------- */







/*	hosting
---------------------------------------------------------------------------------- */



//	global install tool
npm install -g firebase-tools

//	inside project folder init firebase hosting
firebase init

//	to deploy
firebase deploy

//	firebase.json
{
	"hosting": {
		"public": "dist",
		"ignore": [
			"firebase.json",
			"**/.*",
			"**/node_modules/**"
		],
		"rewrites": [
			{
				"source": "**",
				"destination": "/index.html"
			}
		],
		"headers": [ {
			"source" : "**/*.@(eot|otf|ttf|ttc|woff|font.css)",
			"headers" : [ {
				"key" : "Access-Control-Allow-Origin",
				"value" : "*"
			} ]
		}, {
			"source" : "**/*.@(js|css)",
			"headers" : [ {
				"key" : "Cache-Control",
				"value" : "max-age=604800"
			} ]
		}, {
			"source" : "**/*.@(jpg|jpeg|gif|png|ico)",
			"headers" : [ {
				"key" : "Cache-Control",
				"value" : "max-age=604800"
			} ]
		} ],
		"cleanUrls": true,
		"trailingSlash": false
	}
}







/*	cloud functions
---------------------------------------------------------------------------------- */

//	add functions to existing project
firebase init functions

//	add environment configs into project
firebase functions:config:set someservice.key="THE API KEY" someservice.id="THE CLIENT ID"

//	read what's in the configs of project
firebase functions:config:get

//	using configs in functions
functions.config().someservice.key

//	when using firebase admin, config is auto included
const admin = require( 'firebase-admin' )
admin.initializeApp( functions.config().firebase )






