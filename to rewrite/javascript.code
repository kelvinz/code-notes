/*	general
---------------------------------------------------------------------------------- */



//	string interpolation
`My string and ${ myVar } hand-in-hand.`



//	loops
you can add things to an array in an array loop while it's looping



//	remember to encode user entered stuff before storing
//	error occurred when users entered foreign language
encodeURIComponent( theText )

//	decode to read
decodeURIComponent( theText )



//	element size & position info
const linkCoords = this.getBoundingClientRect()
const coords = {
	width  : linkCoords.width,
	height : linkCoords.height,
	top    : linkCoords.top + window.scrollY,
	left   : linkCoords.left + window.scrollX
}
highlight.style.width = `${coords.width}px`
highlight.style.height = `${coords.height}px`
highlight.style.transform = `translate(${coords.left}px, ${coords.top}px)`



//	string number to actual number
const hello = '1'
const helloNum = parseFloat( hello )



//	loop till true
//	by return-ing the function itself
function randomNum() {
	const myNum = Math.floor( Math.random() * 3 )
	if ( myNum === 2 ) {
		return randomNum()
	}
	return myNum
}



//	shorten code single if
if ( mouseDown ) {
	doSomething()
}

//	is the same as
if ( mouseDown ) doSomething()

//	or
mouseDown && doSomething()



//	shorten code if else
if ( mouseDown ) {
	doSomething()
} else {
	doSomethingElse()
}

//	is the same as
mouseDown? doSomething() : doSomethingElse()



//	return
if ( myFunc( a ) > myFunc( b ) ) {
	return 1
} else {
	return -1
}

//	is the same as
return myFunc( a ) > myFunc( b ) ? 1 : -1



//	return obj
const barker = ( state ) => {
	return {
		bark: () => {
			console.log( 'woof' + state.name )
		}
	}
}

//	is the same as
const barker = ( state ) => ({
	bark() {
		console.log( 'woof' + state.name )
	}
})

//	is the same as
const barker = ( state ) => ({
	bark: () => console.log( 'woof' + state.name )
})



//	factory functions

const barker = ( state ) => ({
	bark() { console.log( 'woof ' + state.name ) }
})

const driver = ( state ) => ({
	drive() { state.position = state.position + state.speed	}
})

barker({ name: 'karo' }).bark()
//	woof karo

const murderRobotDog = ( name ) => {
	let state = {
		name,
		speed: 100,
		position: 0
	}

	return Object.assign({},
		barker( state ),
		driver( state )
	)
}

murderRobotDog( 'sniffles' ).bark()
//	woof sniffles

const newBot = murderRobotDog( 'anol' )
newBot.bark()
//	woof anol

//	other way of writing
function createCircle( radius ) {
	return {
		radius,
		draw() {
			console.log( 'draw' )
		}
	}
}

const circle1 = createCircle( 1 )
console.log( circle1 )
circle1.draw()

//	yet another example
function makeGreeting( lang ) {
	return function( firstname, lastname ) {
		if ( lang === 'en' ) {
			console.log( 'Hello ' + firstname + ' ' + lastname )
		}
		if ( lang === 'es' ) {
			console.log( 'Hola ' + firstname + ' ' + lastname )
		}
	}
}

var greetEnglish = makeGreeting( 'en' )
var greetSpanish = makeGreeting( 'es' )
greetEnglish( 'John', 'Doe' )
//	Hello John Doe'
greetSpanish( 'John', 'Doe' )
//	Hola John Doe'


//	fetch
fetch( 'https://api.github.com/users/kelvin___' )
.then( data => data.json() )
.then( data => {
	console.log( data )
})



//	when splicing/deleting from array
//	while looping through it
//	do in reverse to prevent bugs



//	grouping console log
console.group( something )
console.log( 'xxx' )
console.groupEnd( something )



//	tabled results
//	if there is a dogs array you want to console check
console.table( dogs )



//	console log time
console.time( 'fetching data' )
fetch( 'https://api.github.com/users/kelvin___' )
.then( data => data.json() )
.then( data => {
	console.timeEnd( 'fetching data' )
	console.log( data )
})








/*	replacing jquery
---------------------------------------------------------------------------------- */



//	select one
//	gives a single element
document.querySelector( '.myClass' )



//	select all <div data-something="1">
//	gives array
document.querySelectorAll( '[data-something]' )

//	get data
console.log( e.dataset.something )



myButton.addEventListener( 'click', () => {
	console.log( 'hello' )
})



//	add & remove classes
myDiv.classList.add( 'hello' )
myDiv.classList.remove( 'hello' )







/*	terminology
---------------------------------------------------------------------------------- */



/*	sync vs async
------------------- */

synchronous = one by one in sequence, can only proceed after one finishes
asynchronous = non sequential; next in line can start before previous finishes







/*	promises
---------------------------------------------------------------------------------- */



/*	example
------------------- */

doSomeAsyncTask() {
	return new Promise( ( resolve, reject )=> {
		//	doYourAsyncTask
		if ( yourTasks suceeds ) {
			resolve( //	pass a string or object here optionally )
		} else {
			reject( //	pass a string or object here optionally )
		}
	})
}

doSomeAsyncTask()
.then( ( //	recieve object or string )=> {
	console.log( //	object or string )
})
.catch( ( //	recieve object or string )=> {
	console.log( //	object or string )
})







/*	math
---------------------------------------------------------------------------------- */



Math.floor
//	returns the largest integer less than or equal to a given number

Math.ceil
//	returns the smallest integer greater than or equal to a given number

Math.trunc
//	returns the integer part of a number by removing any fractional digits
//	shorthand ~~

Math.round
//	returns the value of a number rounded to the nearest integer







/*	helpers
---------------------------------------------------------------------------------- */



/*	what is
------------------- */



function isArray( object ) {
	return Object.prototype.toString.call( object ) == '[object Array]';
}

function isFunction( object ) {
	return typeof object == 'function';
}

function isNumber( object ) {
	return typeof object == 'number';
}

function isString( object ) {
	return typeof object == 'string';
}



/*	random
------------------- */



//	to update
function random( min, max ) {
	if ( isArray( min ) && min.length === 2 ) {
		return min[ 0 ] + Math.random() * ( min[ 1 ] - min[ 0 ] )
	}
	if ( isArray( min ) ) {
		return min[ ~~( Math.random() * min.length ) ]
	}
	if ( !isNumber( max ) ) {
		max = min || 1, min = 0
	}
	return min + Math.random() * ( max - min )
}



//	shuffle arrays
function shuffle( arr ) {
	let i = arr.length, t, r
	while ( 0 !== i ) {
		r = Math.floor( Math.random() * i )
		i -= 1
		t = arr[ i ]
		arr[ i ] = arr[ r ]
		arr[ r ] = t
	}
	return arr
}



/*	one time
------------------- */



// const oneTimeFunction = once( function() {
// 	// function goes here
// });
// creates function that only runs once
function once( fn, context ) {
	let result;
	return function() {
		if( fn ) {
			result = fn.apply( context || this, arguments );
			fn = null;
		}
		return result;
	};
}



// const myFunction = debounce( function() {
// 	// stuff I want to do
// }, 500);
// window.addEventListener( 'resize', myFunction );
// function waits or immediately activates only after x is done
function debounce( func, wait, immediate ) {
	let timeout;
	return function() {
		let context = this, args = arguments;
		let later = function() {
			timeout = null;
			if ( !immediate ) func.apply( context, args );
		};
		let callNow = immediate && !timeout;
		clearTimeout( timeout );
		timeout = setTimeout( later, wait );
		if ( callNow ) func.apply( context, args );
	};
};



/*	norm
------------------- */



//	where me is current value you want to normalize
//	start1, end1 is what is the range of current value
//	start2, end2 is to normalize to what ranges
norm( me, start1, end1, start2, end2 ) {
	return ( me - start1 ) / ( end1 - start1 ) * ( end2 - start2 ) + start2
}



/*	chunks
------------------- */

function chunks( array, size ) {
	let results = []
	for ( i = 0, j = array.length; i < j; i += size ) {
		results.push( array.slice( i ,i + size ) )
	}
	return results
}


/*	% chance
------------------- */



//	where arr is an array of objects
//	each object has a chance property
//	chance is 0-1
//	all objects' chance adds up to 1

pickOne( arr ) {
	let
	i = 0,
	r = Math.random()

	while ( r > 0 ) {
		r = r - arr[ i ].chance
		i++
	}

	i--
	return arr[ i ]
}







/*	es6 tips
---------------------------------------------------------------------------------- */



const x = e.offsetX
const y = e.offsetY
//	is the same as
const { offsetX: x, offsetY: y } = e



//	split & assign at same time
//	make string to num at end with map
const timeCode = 5:55
const [ min, secs ] = timeCode.split( ':' ).map( parseFloat )



//	if doesn't match a input element
if ( !e.target.matches( 'input' ) ) return



//	changing two vars at the same time
[ lastX, lastY ] = [ e.offsetX, e.offsetY ]






